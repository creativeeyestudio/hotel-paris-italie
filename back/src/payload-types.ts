/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    posts: Post;
    gallery: Gallery;
    navigation: Navigation;
    settings: Setting;
    'chr-config': ChrConfig;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    gallery: GallerySelect<false> | GallerySelect<true>;
    navigation: NavigationSelect<false> | NavigationSelect<true>;
    settings: SettingsSelect<false> | SettingsSelect<true>;
    'chr-config': ChrConfigSelect<false> | ChrConfigSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'legal-notice': LegalNotice;
    confidentiality: Confidentiality;
    cgv: Cgv;
  };
  globalsSelect: {
    'legal-notice': LegalNoticeSelect<false> | LegalNoticeSelect<true>;
    confidentiality: ConfidentialitySelect<false> | ConfidentialitySelect<true>;
    cgv: CgvSelect<false> | CgvSelect<true>;
  };
  locale: 'fr' | 'en' | 'es';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'admin' | 'editor' | 'author' | 'contributor';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  slug: string;
  content?: {
    layout?:
      | (
          | {
              title: string;
              content: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              id?: string | null;
              blockName?: string | null;
              blockType: 'text';
            }
          | {
              title: string;
              content: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              id?: string | null;
              blockName?: string | null;
              blockType: 'text-intro';
            }
          | {
              title: string;
              content: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              image: string | Media;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text-image';
            }
          | {
              title: string;
              content: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              image1: string | Media;
              image2?: (string | null) | Media;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text-double-image';
            }
          | {
              parallax_image: string | Media;
              parallax_speed: number;
              id?: string | null;
              blockName?: string | null;
              blockType: 'parallax';
            }
          | {
              htmlCode: string;
              id?: string | null;
              blockName?: string | null;
              blockType: 'html-content';
            }
          | {
              hero_image: (string | Media)[];
              id?: string | null;
              blockName?: string | null;
              blockType: 'heroscreen';
            }
        )[]
      | null;
  };
  config: {
    site: string | Setting;
    published?: ('0' | '1' | '2') | null;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  title?: string | null;
  identityGroup?: {
    logo?: (string | null) | Media;
    favicon?: (string | null) | Media;
    homepage?: (string | null) | Page;
  };
  maintenanceGroup?: {
    maintenance?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  slug: string;
  excerpt?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  coverImage?: (string | null) | Media;
  config: {
    site: string | Setting;
    published?: ('0' | '1' | '2') | null;
    createdBy?: (string | null) | User;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery".
 */
export interface Gallery {
  id: string;
  gallery_name?: string | null;
  gallery_images: (string | Media)[];
  config: {
    site: string | Setting;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
  id: string;
  menuId: 'main-menu' | 'secondary-menu' | 'footer-menu';
  items?:
    | {
        type: 'page' | 'post' | 'external';
        page?: (string | null) | Page;
        post?: (string | null) | Post;
        label?: string | null;
        url?: string | null;
        image?: (string | null) | Media;
        newTab?: boolean | null;
        children?:
          | {
              type: 'page' | 'post' | 'external';
              page?: (string | null) | Page;
              post?: (string | null) | Post;
              label?: string | null;
              url?: string | null;
              image?: (string | null) | Media;
              newTab?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  config: {
    site: string | Setting;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chr-config".
 */
export interface ChrConfig {
  id: string;
  hotelData: {
    site: string | Setting;
  };
  thais?: {
    apiUrl?: string | null;
    username?: string | null;
    password?: string | null;
    passwordHash?: string | null;
  };
  siteminder?: {
    apiUrl?: string | null;
    password?: string | null;
    passwordHash?: string | null;
  };
  zenchef?: {
    widget?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'gallery';
        value: string | Gallery;
      } | null)
    | ({
        relationTo: 'navigation';
        value: string | Navigation;
      } | null)
    | ({
        relationTo: 'settings';
        value: string | Setting;
      } | null)
    | ({
        relationTo: 'chr-config';
        value: string | ChrConfig;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?:
    | T
    | {
        layout?:
          | T
          | {
              text?:
                | T
                | {
                    title?: T;
                    content?: T;
                    id?: T;
                    blockName?: T;
                  };
              'text-intro'?:
                | T
                | {
                    title?: T;
                    content?: T;
                    id?: T;
                    blockName?: T;
                  };
              'text-image'?:
                | T
                | {
                    title?: T;
                    content?: T;
                    image?: T;
                    id?: T;
                    blockName?: T;
                  };
              'text-double-image'?:
                | T
                | {
                    title?: T;
                    content?: T;
                    image1?: T;
                    image2?: T;
                    id?: T;
                    blockName?: T;
                  };
              parallax?:
                | T
                | {
                    parallax_image?: T;
                    parallax_speed?: T;
                    id?: T;
                    blockName?: T;
                  };
              'html-content'?:
                | T
                | {
                    htmlCode?: T;
                    id?: T;
                    blockName?: T;
                  };
              heroscreen?:
                | T
                | {
                    hero_image?: T;
                    id?: T;
                    blockName?: T;
                  };
            };
      };
  config?:
    | T
    | {
        site?: T;
        published?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  content?: T;
  coverImage?: T;
  config?:
    | T
    | {
        site?: T;
        published?: T;
        createdBy?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery_select".
 */
export interface GallerySelect<T extends boolean = true> {
  gallery_name?: T;
  gallery_images?: T;
  config?:
    | T
    | {
        site?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
  menuId?: T;
  items?:
    | T
    | {
        type?: T;
        page?: T;
        post?: T;
        label?: T;
        url?: T;
        image?: T;
        newTab?: T;
        children?:
          | T
          | {
              type?: T;
              page?: T;
              post?: T;
              label?: T;
              url?: T;
              image?: T;
              newTab?: T;
              id?: T;
            };
        id?: T;
      };
  config?:
    | T
    | {
        site?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  title?: T;
  identityGroup?:
    | T
    | {
        logo?: T;
        favicon?: T;
        homepage?: T;
      };
  maintenanceGroup?:
    | T
    | {
        maintenance?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chr-config_select".
 */
export interface ChrConfigSelect<T extends boolean = true> {
  hotelData?:
    | T
    | {
        site?: T;
      };
  thais?:
    | T
    | {
        apiUrl?: T;
        username?: T;
        password?: T;
        passwordHash?: T;
      };
  siteminder?:
    | T
    | {
        apiUrl?: T;
        password?: T;
        passwordHash?: T;
      };
  zenchef?:
    | T
    | {
        widget?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "legal-notice".
 */
export interface LegalNotice {
  id: string;
  editeur: {
    identite: string;
    capital?: string | null;
    coordonnees?: {
      adresse?: string | null;
      email?: string | null;
      telephone?: string | null;
    };
  };
  concepteur: {
    nom: string;
    site?: string | null;
  };
  hebergeur: {
    nom: string;
    adresse?: string | null;
    site?: string | null;
  };
  other?: {
    proprieteIntellectuelle?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "confidentiality".
 */
export interface Confidentiality {
  id: string;
  identity: {
    id_name: string;
    id_adress: string;
    id_email: string;
    id_tel?: string | null;
  };
  personal_data?: {
    data_collected?:
      | {
          data_collect?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cgv".
 */
export interface Cgv {
  id: string;
  user_data: {
    user_name: string;
    user_adress: string;
    user_email: string;
    user_siret: string;
  };
  services_data?:
    | {
        service: string;
        id?: string | null;
      }[]
    | null;
  payments_data: {
    payment: {
      payment_item: string;
      id?: string | null;
    }[];
    prepayment?: boolean | null;
    payment_place?: boolean | null;
  };
  cancel_conditions: {
    cancel_delay: string;
    cancel_fees: string;
    special_cancel_conditions?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "legal-notice_select".
 */
export interface LegalNoticeSelect<T extends boolean = true> {
  editeur?:
    | T
    | {
        identite?: T;
        capital?: T;
        coordonnees?:
          | T
          | {
              adresse?: T;
              email?: T;
              telephone?: T;
            };
      };
  concepteur?:
    | T
    | {
        nom?: T;
        site?: T;
      };
  hebergeur?:
    | T
    | {
        nom?: T;
        adresse?: T;
        site?: T;
      };
  other?:
    | T
    | {
        proprieteIntellectuelle?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "confidentiality_select".
 */
export interface ConfidentialitySelect<T extends boolean = true> {
  identity?:
    | T
    | {
        id_name?: T;
        id_adress?: T;
        id_email?: T;
        id_tel?: T;
      };
  personal_data?:
    | T
    | {
        data_collected?:
          | T
          | {
              data_collect?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cgv_select".
 */
export interface CgvSelect<T extends boolean = true> {
  user_data?:
    | T
    | {
        user_name?: T;
        user_adress?: T;
        user_email?: T;
        user_siret?: T;
      };
  services_data?:
    | T
    | {
        service?: T;
        id?: T;
      };
  payments_data?:
    | T
    | {
        payment?:
          | T
          | {
              payment_item?: T;
              id?: T;
            };
        prepayment?: T;
        payment_place?: T;
      };
  cancel_conditions?:
    | T
    | {
        cancel_delay?: T;
        cancel_fees?: T;
        special_cancel_conditions?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}